# App para Day trade Analytics em tempo real

import re
import streamlit as st
import yfinance as yf
import plotly.graph_objects as go
import plotly.express as px
from phi.agent import Agent
from phi.model.groq  import Groq
#from phi.model.openai import OpenAI
from phi.model.anthropic import Claude
from phi.tools.yfinance import YFinanceTools
from phi.tools.duckduckgo import DuckDuckGo
from dotenv import load_dotenv
import os

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Usa o cache do Streamlit para melhorar a performance
@st.cache_data

# Define a fun√ß√£o para obter os dados do Yahoo Finance
def js_get_stock_data(ticker, period='6mo'):

    # Cria um objeto ticker do Yahoo Fiance para a a√ß√£o espedificada
    stock = yf.Ticker(ticker)

    # Obt√©m os dados hist√≥ricos do pre√ßo da a√ß√£o para o periodo definido
    hist = stock.history(period=period)

    # Reseta o √≠ndice do DataFrame para transformar a coluna de data em uma coluna normal
    hist.reset_index(inplace=True)

    # Retorna o DataFrame com os dados hist√≥ricos    
    return hist

# Define a fun√ß√£o para plotar o pre√ßo das a√ß√µes com base no hist√≥rico fornecido
def js_plot_stock_price(hist, ticker):
    # Cria um gr√°fico de linha interativo usando Plotly Express
    # O eixo X representa a data e o eixo Y representa o pre√ßo de fechamento das a√ß√µes
    # O t√≠tulo do gr√°fico inclui o ticker da a√ß√£o e o per√≠odo de an√°lise
    fig = px.line(hist, x="Date", y="Close", title=f"{ticker} Pre√ßos das A√ß√µes (√öltimos 6 Meses)", markers=True)
    
    # Exibe o gr√°fico no Streamlit
    st.plotly_chart(fig)

# Define a fun√ß√£o para plotar um gr√°fico de candlestick com base no hist√≥rico fornecido
def js_plot_candlestick(hist, ticker):

    # Cria um objeto Figure do Plotly para armazenar o gr√°fico
    fig = go.Figure(

        # Adiciona um gr√°fico de candlestick com os dados do hist√≥rico da a√ß√£o
        data=[go.Candlestick(x=hist['Date'],        # Define as datas no eixo X
                             open=hist['Open'],     # Define os pre√ßos de abertura
                             high=hist['High'],     # Define os pre√ßos mais altos
                             low=hist['Low'],       # Define os pre√ßos mais baixos
                             close=hist['Close'])]  # Define os pre√ßos de fechamento
    )
    
    # Atualiza o layout do gr√°fico, incluindo um t√≠tulo din√¢mico com o ticker da a√ß√£o
    fig.update_layout(title=f"{ticker} Candlestick Chart (√öltimos 6 Meses)")
    
    # Exibe o gr√°fico no Streamlit
    st.plotly_chart(fig)

# Define a fun√ß√£o para plotar m√©dias m√≥veis com base no hist√≥rico fornecido
def js_plot_media_movel(hist, ticker):

    # Calcula a M√©dia M√≥vel Simples (SMA) de 20 per√≠odos e adiciona ao DataFrame
    hist['SMA_20'] = hist['Close'].rolling(window=20).mean()
    
    # Calcula a M√©dia M√≥vel Exponencial (EMA) de 20 per√≠odos e adiciona ao DataFrame
    hist['EMA_20'] = hist['Close'].ewm(span=20, adjust=False).mean()
    
    # Cria um gr√°fico de linha interativo usando Plotly Express
    # Plota os pre√ßos de fechamento, a SMA de 20 per√≠odos e a EMA de 20 per√≠odos
    fig = px.line(hist, 
                  x='Date', 
                  y=['Close', 'SMA_20', 'EMA_20'],
                  title=f"{ticker} M√©dias M√≥veis (√öltimos 6 Meses)",  # Define o t√≠tulo do gr√°fico
                  labels={'value': 'Price (USD)', 'Date': 'Date'})    # Define os r√≥tulos dos eixos
    
    # Exibe o gr√°fico no Streamlit
    st.plotly_chart(fig)

# Define a fun√ß√£o para plotar o volume de negocia√ß√£o da a√ß√£o com base no hist√≥rico fornecido
def js_plot_volume(hist, ticker):

    # Cria um gr√°fico de barras interativo usando Plotly Express
    # O eixo X representa a data e o eixo Y representa o volume negociado
    fig = px.bar(hist, 
                 x='Date', 
                 y='Volume', 
                 title=f"{ticker} Trading Volume (√öltimos 6 Meses)")  # Define o t√≠tulo do gr√°fico
    
    # Exibe o gr√°fico no Streamlit
    st.plotly_chart(fig)

########## Configura√ß√£o de Modelos ##########

def js_create_model(provider, model_name, api_key=None):
    """
    Cria o modelo de IA baseado no provedor selecionado
    """
    if provider == "Groq":
        return Groq(id=model_name)
    elif provider == "Claude/Anthropic":
        if api_key:
            # Define a API key no ambiente se fornecida
            os.environ["ANTHROPIC_API_KEY"] = api_key
        return Claude(id=model_name)
    else:
        # Fallback para Groq
        return Groq(id="deepseek-r1-distill-llama-70b")

########## Agentes de IA ##########

def js_create_agents(provider, model_name, api_key=None):
    """
    Cria os agentes de IA baseados no provedor selecionado
    """
    # Modelo principal para agentes especializados
    main_model = js_create_model(provider, model_name, api_key)
    
    # Modelo para o agente coordenador (sempre usa um modelo vers√°til)
    if provider == "Claude/Anthropic":
        coord_model = Claude(id="claude-3-5-sonnet-20241022")
    else:
        coord_model = Groq(id="llama-3.3-70b-versatile")
    
    # Agente de busca web
    web_search_agent = Agent(name="JonhSelmo DayTrade Agente Web Search",
                             role="Fazer busca na web",
                             model=main_model,
                             tools=[DuckDuckGo()],
                             instructions=["Sempre inclua as fontes"],
                             show_tool_calls=True, markdown=True)

    # Agente financeiro
    finance_agent = Agent(name="JonhSelmo Agente Financeiro",
                          model=main_model,
                          tools=[YFinanceTools(stock_price=True,
                                               analyst_recommendations=True,
                                               stock_fundamentals=True,
                                               company_news=True)],
                          instructions=["Use tabelas para mostrar os dados"],
                          show_tool_calls=True, markdown=True)

    # Agente coordenador multi-AI
    multi_ai_agent = Agent(team=[web_search_agent, finance_agent],
                           model=coord_model,
                           instructions=["Sempre inclua as fontes", "Use tabelas para mostrar os dados"],
                           show_tool_calls=True, markdown=True)
    
    return multi_ai_agent

########## App Web ##########

# Configura√ß√£o da p√°gina do Streamlit
st.set_page_config(page_title="JONH DAY TRADE", page_icon="ü§ñ", layout="wide")

# Barra Lateral com abas
st.sidebar.title("Configura√ß√µes")

# Cria√ß√£o das abas na sidebar
sidebar_tab1, sidebar_tab2 = st.sidebar.tabs(["üìã Instru√ß√µes", "‚öôÔ∏è Configura√ß√£o"])

with sidebar_tab1:
    st.markdown("""
    ### Como Utilizar a App:

    1. **Configure a API** na aba "Configura√ß√£o"
    2. Insira o s√≠mbolo do ticker da a√ß√£o desejada
    3. Clique no bot√£o **Analisar** para an√°lise em tempo real

    ### Exemplos de tickers v√°lidos:
    - MSFT (Microsoft)
    - TSLA (Tesla)
    - AMZN (Amazon)
    - GOOG (Alphabet)

    Mais tickers podem ser encontrados aqui: https://stockanalysis.com/list/nasdaq-stocks/

    ### Finalidade da App:
    Este aplicativo realiza an√°lises avan√ßadas de pre√ßos de a√ß√µes da Nasdaq em tempo real utilizando Agentes de IA com modelos DeepSeek (via Groq) ou Claude (Anthropic) para apoio a estrat√©gias de Day Trade para monetiza√ß√£o.
    """)
    
    # Bot√£o de suporte
    if st.button("Suporte"):
        st.write("No caso de d√∫vidas envie e-mail para: suporte@datascienceacademy.com.br")

with sidebar_tab2:
    st.markdown("### Provedor de IA")
    
    # Sele√ß√£o do provedor
    provider = st.selectbox(
        "Selecione o Provedor:",
        ["Groq", "Claude/Anthropic"],
        index=0,
        key="provider_select"
    )
    
    # Configura√ß√£o baseada no provedor selecionado
    if provider == "Groq":
        st.info("üîß **Groq** - Usando vari√°veis de ambiente")
        
        model_options = [
            "deepseek-r1-distill-llama-70b",
            "llama-3.3-70b-versatile",
            "llama-3.1-70b-versatile",
            "mixtral-8x7b-32768"
        ]
        
        selected_model = st.selectbox(
            "Modelo:",
            model_options,
            index=0,
            key="groq_model_select"
        )
        
        st.markdown("""
        **Instru√ß√µes:**
        - Configure `GROQ_API_KEY` no arquivo `.env`
        - Modelos com alta performance
        """)
        
        api_key_input = None
        
    elif provider == "Claude/Anthropic":
        st.info("üß† **Claude/Anthropic** - IA Avan√ßada")
        
        model_options = [
            "claude-3-5-sonnet-20241022",
            "claude-3-5-haiku-20241022",
            "claude-3-opus-20240229"
        ]
        
        selected_model = st.selectbox(
            "Modelo:",
            model_options,
            index=0,
            key="claude_model_select"
        )
        
        # Campo para API key
        api_key_input = st.text_input(
            "API Key:",
            type="password",
            placeholder="sk-ant-api03-...",
            help="Insira sua chave da Anthropic",
            key="claude_api_key"
        )
        
        st.markdown("""
        **Instru√ß√µes:**
        - API key: https://console.anthropic.com/
        - An√°lises mais detalhadas
        - Melhor compreens√£o contextual
        """)
        
        if not api_key_input:
            st.warning("‚ö†Ô∏è Insira sua API Key da Anthropic")
    
    # Salvar configura√ß√µes na sess√£o
    st.session_state['provider'] = provider
    st.session_state['model_name'] = selected_model
    st.session_state['api_key'] = api_key_input
    
    # Bot√£o para testar configura√ß√£o
    if st.button("üß™ Testar", key="test_config"):
        try:
            if provider == "Claude/Anthropic" and not api_key_input:
                st.error("‚ùå API Key obrigat√≥ria!")
            else:
                test_model = js_create_model(provider, selected_model, api_key_input)
                st.success(f"‚úÖ Configura√ß√£o OK!")
                st.info(f"ü§ñ {provider} - {selected_model}")
        except Exception as e:
            st.error(f"‚ùå Erro: {str(e)}")

# T√≠tulo principal
st.title("üìä JONH - Jointed Organization of Not-neural Humans")

# Interface principal
st.header("Day Trade Analytics em Tempo Real com Agentes de IA")

# Mostrar configura√ß√£o atual
current_provider = st.session_state.get('provider', 'Groq')
current_model = st.session_state.get('model_name', 'deepseek-r1-distill-llama-70b')

# Status da configura√ß√£o
if current_provider == "Claude/Anthropic":
    has_api_key = bool(st.session_state.get('api_key'))
    if has_api_key:
        st.success(f"ü§ñ **Configura√ß√£o Ativa:** {current_provider} - {current_model}")
    else:
        st.warning(f"‚ö†Ô∏è **Configura√ß√£o Incompleta:** {current_provider} - Configure API Key na sidebar")
else:
    st.success(f"ü§ñ **Configura√ß√£o Ativa:** {current_provider} - {current_model}")

# Caixa de texto para input do usu√°rio
ticker = st.text_input("Digite o C√≥digo (s√≠mbolo do ticker):").upper()

# Se o usu√°rio pressionar o bot√£o, entramos neste bloco
if st.button("Analisar"):

    # Verificar se Claude est√° configurado corretamente
    if st.session_state.get('provider') == 'Claude/Anthropic' and not st.session_state.get('api_key'):
        st.error("‚ùå Por favor, configure sua API Key da Anthropic na sidebar ‚Üí Configura√ß√£o")
        st.stop()

    # Se temos o c√≥digo da a√ß√£o (ticker)
    if ticker:

        # Inicia o processamento
        with st.spinner("Buscando os Dados em Tempo Real. Aguarde..."):
            
            try:
                # Obt√©m os dados
                hist = js_get_stock_data(ticker)
                
                # Cria os agentes com a configura√ß√£o atual
                multi_ai_agent = js_create_agents(
                    st.session_state.get('provider', 'Groq'),
                    st.session_state.get('model_name', 'deepseek-r1-distill-llama-70b'),
                    st.session_state.get('api_key')
                )
                
                # Renderiza um subt√≠tulo
                st.subheader("An√°lise Gerada Por IA")
                
                # Executa o time de Agentes de IA
                ai_response = multi_ai_agent.run(f"Resumir a recomenda√ß√£o do analista e compartilhar as √∫ltimas not√≠cias para {ticker}")

                # Remove linhas que come√ßam com "Running:"
                # Remove o bloco "Running:" e tamb√©m linhas "transfer_task_to_finance_ai_agent"
                clean_response = re.sub(r"(Running:[\s\S]*?\n\n)|(^transfer_task_to_finance_ai_agent.*\n?)","", ai_response.content, flags=re.MULTILINE).strip()

                # Imprime a resposta
                st.markdown(clean_response)

                # Renderiza os gr√°ficos
                st.subheader("Visualiza√ß√£o dos Dados")
                js_plot_stock_price(hist, ticker)
                js_plot_candlestick(hist, ticker)
                js_plot_media_movel(hist, ticker)
                js_plot_volume(hist, ticker)
                
            except Exception as e:
                st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
                st.info("üí° Verifique se a configura√ß√£o da API est√° correta na sidebar")
    else:
        st.error("Ticker inv√°lido. Insira um s√≠mbolo de a√ß√£o v√°lido.")

